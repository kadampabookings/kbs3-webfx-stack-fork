<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>webfx-parent</artifactId>
        <groupId>dev.webfx</groupId>
        <version>0.1.0-SNAPSHOT</version>
    </parent>

    <artifactId>webfx-stack-platform</artifactId>
    <packaging>pom</packaging>

    <repositories>

        <!-- For WebFx snapshots download (including webfx-parent) -->
        <repository>
            <id>webfx-snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </repository>

    </repositories>

    <modules>

        <module>webfx-platform-feature-json</module>
        <module>webfx-platform-feature-webassembly</module>
        <module>webfx-platform-feature-windowhistory</module>
        <module>webfx-platform-feature-windowlocation</module>
        <module>webfx-platform-feature-webworker</module>

        <module>webfx-platform-feature-bus</module>
        <module>webfx-platform-feature-query</module>
        <module>webfx-platform-feature-submit</module>
        <module>webfx-platform-feature-websocket</module>

        <module>webfx-platform-independent-feature-buscall</module>
        <module>webfx-platform-independent-feature-datasource</module>
        <module>webfx-platform-independent-feature-serial</module>
        <module>webfx-platform-independent-feature-submitlistener</module>
        <module>webfx-platform-independent-feature-websocketbus</module>

        <module>webfx-platform-providers-modules</module>

        <module>webfx-platform-vertx-appcontainer-impl</module>
        <module>webfx-platform-vertx-scheduler-impl</module>

    </modules>

    <properties>

        <lib.teavm.version>0.6.1</lib.teavm.version>
        <lib.vertx.version>3.9.1</lib.vertx.version>
        <lib.javawebsocket.version>1.5.1</lib.javawebsocket.version>

        <plugin.javacup.version>11b-20160615</plugin.javacup.version>
        <plugin.jflex.version>1.8.2</plugin.jflex.version>
        <plugin.teavm.version>${lib.teavm.version}</plugin.teavm.version>

        <plugin.teavm.param.mainClass>TBD</plugin.teavm.param.mainClass>
        <plugin.teavm.param.targetType>JAVASCRIPT</plugin.teavm.param.targetType>
        <plugin.teavm.param.minifying>true</plugin.teavm.param.minifying>
        <plugin.teavm.param.debug>false</plugin.teavm.param.debug>

    </properties>

    <dependencyManagement>
    <dependencies>

        <!--
         ********************************************************************
         * Libraries required for the TeaVM Platform (webfx-platform-teavm) *
         ********************************************************************
         -->

        <!-- Emulator of Java class library for TeaVM -->
        <dependency>
            <groupId>org.teavm</groupId>
            <artifactId>teavm-classlib</artifactId>
            <version>${lib.teavm.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- JavaScriptObjects (JSO) - a JavaScript binding for TeaVM -->
        <dependency>
            <groupId>org.teavm</groupId>
            <artifactId>teavm-jso</artifactId>
            <version>${lib.teavm.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.teavm</groupId>
            <artifactId>teavm-interop</artifactId>
            <version>${lib.teavm.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.teavm</groupId>
            <artifactId>teavm-jso-apis</artifactId>
            <version>${lib.teavm.version}</version>
            <scope>provided</scope>
        </dependency>


        <!--
         *********************************************
         * Libraries required for the Webfx platform *
         *********************************************
         Note that java-cup-runtime can't be transpiled as is, so it is replaced with forked and
         minimized version (webfx-lib-javacupruntime) in webfx-platforms-web (see pom).
         -->
        <dependency>
            <groupId>com.github.vbmacher</groupId>
            <artifactId>java-cup-runtime</artifactId>
            <version>${lib.javacuprutime.version}</version>
        </dependency>

        <!--
         *******************************************************************
         * Libraries required for the Java Platform (webfx-platforms-java) *
         *******************************************************************
         -->

        <!-- JavaWebsocket -->
        <dependency>
            <groupId>org.java-websocket</groupId>
            <artifactId>Java-WebSocket</artifactId>
            <version>${lib.javawebsocket.version}</version>
        </dependency>


        <!--
         ********************************************************************
         * Libraries required for the Vert.x Platform (webfx-platform-vertx) *
         ********************************************************************
         -->

        <!-- Vert.x core -->
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
            <version>${lib.vertx.version}</version>
        </dependency>

        <!-- Vert.x web -->
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web</artifactId>
            <version>${lib.vertx.version}</version>
        </dependency>

        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-bridge-common</artifactId>
            <version>${lib.vertx.version}</version>
        </dependency>

        <!-- Vert.x postgres and mysql really-asynchronous client -->
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-sql-common</artifactId>
            <version>${lib.vertx.version}</version>
        </dependency>

        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-mysql-postgresql-client-jasync</artifactId>
            <version>${lib.vertx.version}</version>
        </dependency>

        <!-- Vert.x jdbc pseudo-asynchronous client -->
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-jdbc-client</artifactId>
            <version>${lib.vertx.version}</version>
        </dependency>


    </dependencies>
    </dependencyManagement>

    <build>
    <pluginManagement>
        <plugins>

            <!--
             *********************************
             * Java CUP plugin configuration *
             *********************************
             Java CUP is a parser generator, it produces the parser java code from a .cup grammar file
             -->
            <plugin>
                <groupId>com.github.vbmacher</groupId>
                <artifactId>cup-maven-plugin</artifactId>
                <version>${plugin.javacup.version}</version>
            </plugin>

            <!--
             ******************************
             * JFlex plugin configuration *
             ******************************
             JFlex is a lexical analyzer generator, it produces the lexer java code from a .flex lexical file
             -->
            <plugin>
                <groupId>de.jflex</groupId>
                <artifactId>jflex-maven-plugin</artifactId>
                <version>${plugin.jflex.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
             ******************************
             * TeaVM plugin configuration *
             ******************************
             -->
            <plugin>
                <groupId>org.teavm</groupId>
                <artifactId>teavm-maven-plugin</artifactId>
                <version>${plugin.teavm.version}</version>
                <dependencies>
                    <!-- This dependency is required by TeaVM to emulate subset of Java class library -->
                    <dependency>
                        <groupId>org.teavm</groupId>
                        <artifactId>teavm-classlib</artifactId>
                        <version>${lib.teavm.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>TeaVm-Compile</id>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <phase>process-classes</phase>
                        <configuration>
                            <targetType>${plugin.teavm.param.targetType}</targetType>
                            <!-- Directory where TeaVM should put generated files. This configuration conforms to the settings of the WAR plugin -->
                            <targetDirectory>${project.build.directory}/teavm/</targetDirectory>

                            <!-- Main class, containing static void main(String[]) -->
                            <mainClass>${plugin.teavm.param.mainClass}</mainClass>

                            <!-- Whether TeaVM should produce minified JavaScript. Can reduce JavaScript file size more than two times -->
                            <minifying>${plugin.teavm.param.minifying}</minifying>
                            <!-- Whether TeaVM should produce debug information for its built-in debugger -->
                            <debugInformationGenerated>${plugin.teavm.param.debug}</debugInformationGenerated>
                            <!-- Whether TeaVM should produce source maps file -->
                            <sourceMapsGenerated>${plugin.teavm.param.debug}</sourceMapsGenerated>
                            <!-- Whether TeaVM should also put source files into output directory, for compatibility with source maps -->
                            <sourceFilesCopied>${plugin.teavm.param.debug}</sourceFilesCopied>
                        </configuration>
                    </execution>
                </executions>
            </plugin>




        </plugins>
    </pluginManagement>
    </build>

</project>