package dev.webfx.stack.session.state.client;

import dev.webfx.stack.session.Session;
import dev.webfx.stack.session.state.SessionAccessor;
import dev.webfx.stack.session.state.StateAccessor;

/**
 * @author Bruno Salmon
 */
public final class ClientSideStateSessionSyncer {

    private static ClientSideStateSession getClientSideStateSession() {
        return ClientSideStateSession.getInstance();
    }

    // ======================================== CONNECTION STATE MANAGEMENT ===========================================

    public static void setClientConnected(boolean connected) {
        setClientConnected(getClientSideStateSession(), connected);
    }

    public static void setClientConnected(ClientSideStateSession clientSideStateSession, boolean connected) {
        clientSideStateSession.changeConnected(connected);
    }


    // ======================================== INCOMING STATE ON CLIENT ========================================
    // Sync methods to be used on client side, when the client receives an incoming state from the server

    public static void syncClientSessionFromIncomingServerState(Object serverState) {
        syncClientSessionFromIncomingServerState(getClientSideStateSession(), serverState);
    }

    public static void syncClientSessionFromIncomingServerState(ClientSideStateSession clientSideStateSession, Object serverState) {
        clientSideStateSession.incrementServerMessageSequence();
        // clientSession.sessionId <= serverState.sessionId ? YES IF SET, because this means the server communicated the session id
        clientSideStateSession.changeSessionId(StateAccessor.getSessionId(serverState), true, true);
        // clientSession.userId <= serverState.userId ? YES IF SET, as this means the server communicates the user id
        clientSideStateSession.changeUserId(StateAccessor.getUserId(serverState), true, true);
        // clientSession.runId <= serverState.runId ? NEVER, as the server is not meant to report that info back to the client
    }

    public static Object syncIncomingServerStateFromClientSession(Object serverState) {
        return syncIncomingServerStateFromClientSession(serverState, getClientSideStateSession());
    }

    public static Object syncIncomingServerStateFromClientSession(Object serverState, ClientSideStateSession clientSideStateSession) {
        Session clientSession = clientSideStateSession.getClientSession();
        // serverState.sessionId <= clientSession.id ? ALWAYS, because this is the server session that is responsible for the session id
        serverState = StateAccessor.setSessionId(serverState, SessionAccessor.getSessionId(clientSession), true);
        // serverState.userId <= clientSession.userId ? YES IF NOT SET, otherwise this means the client switched user, so we keep that info
        serverState = StateAccessor.setUserId(serverState, SessionAccessor.getUserId(clientSession), false);
        // serverState.runId <= clientSession.runId ? YES IF NOT SET, otherwise this means the client communicates it, so we keep that info
        serverState = StateAccessor.setRunId(serverState, SessionAccessor.getUserId(clientSession), false);
        return serverState;
    }


    // ======================================== OUTGOING STATE ON CLIENT ========================================
    // Sync methods to be used on client side, when the client is about to send a state generated by the client to the server

    public static void syncClientSessionFromOutgoingClientState(Object clientState) {
        syncClientSessionFromOutgoingClientState(getClientSideStateSession(), clientState);
    }

    public static void syncClientSessionFromOutgoingClientState(ClientSideStateSession clientSideStateSession, Object clientState) {
        // clientSession.sessionId <= clientState.sessionId ? YES IF SET
        clientSideStateSession.changeSessionId(StateAccessor.getSessionId(clientState), true, false);
        // clientSession.userId <= clientState.userId ? YES IF SET
        clientSideStateSession.changeUserId(StateAccessor.getUserId(clientState), true, false);
        // clientSession.runId <= clientState.runId ? YES IF SET
        clientSideStateSession.changeRunId(StateAccessor.getRunId(clientState), true, false);
    }

    public static Object syncOutgoingClientStateFromClientSession(Object clientState) {
        return syncOutgoingClientStateFromClientSession(clientState, getClientSideStateSession());
    }

    public static Object syncOutgoingClientStateFromClientSession(Object clientState, ClientSideStateSession clientSideStateSession) {
        // clientState.sessionId <= clientSession.id ? YES IF NOT YET SENT TO SERVER
        clientState = clientSideStateSession.updateStateSessionIdFromClientSessionIfNotYetSynced(clientState);
        // clientState.userId <= clientSession.userId ? YES IF NOT YET SENT TO SERVER
        clientState = clientSideStateSession.updateStateUserIdFromClientSessionIfNotYetSynced(clientState);
        // clientState.runId <= clientSession.runId ? YES IF NOT YET SENT TO SERVER
        clientState = clientSideStateSession.updateStateRunIdFromClientSessionIfNotYetSynced(clientState);
        return clientState;
    }

}
